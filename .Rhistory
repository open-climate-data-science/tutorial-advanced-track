?center
??center
scale(cardshort,scale=FALSE)
pca_card<- princomp(scale(cardshort,scale=FALSE),cor = FALSE)
plot(pca_card$scores, pch = 16, col = as.factor(IfRain))
plot(pca_card$scores, pch = 16, col =IfRain)
pca_card<- princomp(scale(cardshort[-IfRain],scale=FALSE),cor = FALSE)
cardshort <- cardinal%>%select(-c(date,Tprep,MinT,MaxT))
cardshort
pca_card<- princomp(scale(cardshort[-IfRain],scale=FALSE),cor = FALSE)
pca_card<- princomp(scale(cardshort[,-c(IfRain)],scale=FALSE),cor = FALSE)
cardshort[,c(IfRain)]
cardshort
cardshor$IfRain
cardshorr$IfRain
cardshort$IfRain
IfRainVar<- cardinal$IfRain
cardshort <- cardinal%>%select(-c(date,IfRain.Tprep,MinT,MaxT))
cardshort <- cardinal%>%select(-c(date,IfRain,Tprep,MinT,MaxT))
cardshort
pca_card<- princomp(scale(cardshort,scale=FALSE),cor = FALSE)
plot(pca_card$scores, pch = 16, col =IfRain)
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend(0, 0.4, c("No Rain", "Rain"), pch = 16, col = c("black", "red"))
legend( c("No Rain", "Rain"), pch = 16, col = c("black", "red"))
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend( c("No Rain", "Rain"), pch = 16, col = c("black", "red"))
help(legend)
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend(150,150, c("No Rain", "Rain"), pch = 16, col = c("black", "red"))
legend(x=150,y=150, c("No Rain", "Rain"), pch = 16, col = c("black", "red"))
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend(x=150,y=150, c("No Rain", "Rain"), pch = 16, col = c("black", "red"))
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend(x=200,y=150, c("No Rain", "Rain"), pch = 16, col = c("black", "red"))
legend(200,150, c("No Rain", "Rain"), pch = 16, col = c("black", "red"))
legend(200,150,c("No Rain","Rain"),pch=16,col=c("black","red"))
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend(200,150,c("No Rain","Rain"),pch=16,col=c("black","red"))
legend(200,150,c("No Rain","Rain"),pch=10,col=c("black","red"))
legend(200,150,c("No Rain","Rain"),pch=10,col=c("black","red"))
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend(200,150,c("No Rain","Rain"),pch=10,col=c("black","red"))
legend("topright",c("No Rain","Rain"),pch=10,col=c("black","red"))
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend("topright",c("No Rain","Rain"),pch=10,col=c("black","red"))
IfRainVar<- cardinal$IfRain
cardshort <- cardinal%>%select(-c(date,IfRain,Tprep,MinT,MaxT))
cardshort
pca_card<- princomp(scale(cardshort,scale=FALSE),cor = FALSE)
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend("topright",c("No Rain","Rain"),pch=10,col=c("black","red"))
plot(pca_card$scores, pch = 10, col =IfRainVar)
legend("topright",c("No Rain","Rain"),pch=10,col=c("black","red"))
IfRainVar<- cardinal$IfRain
cardshort <- cardinal%>%select(-c(date,IfRain,Tprep,MinT,MaxT))
cardshort
pca_card<- princomp(scale(cardshort,scale=FALSE),cor = FALSE)
plot(pca_card$scores, pch = 10, col =IfRainVar)
legend("topright",c("No Rain","Rain"),pch=10,col=c("black","red"))
legend("topright",c("No Rain","Rain"),pch=16,col=c("black","red"))
IfRainVar<- cardinal$IfRain
cardshort <- cardinal%>%select(-c(date,IfRain,Tprep,MinT,MaxT))
cardshort
pca_card<- princomp(scale(cardshort,scale=FALSE),cor = FALSE)
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend("topright",c("No Rain","Rain"),pch=16,col=c("black","red"))
summary(pca_card)
screeplot(pca_card, type = "lines")
loadings(pca_card)
biplot(pca_card)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(rnoaa)
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
Ralz_dat <- ncdc(datasetid='GHCND', stationid='GHCND:US1NCAL0013', datatypeid=c('TAVG','PRCP'), startdate = '2011-01-01', enddate="2011-12-31", add_units = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
# weather station data from NOAA API
library(rnoaa)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
summary(fit1)
colnames(cardinal)
#logistic regression
fit1 = glm(IfRain~date+AvgT+AvgLw+AvgSt+AvgSr, data=cardinal, family="binomial")
summary(fit1)
#predict something with logistic regression
str(temp_ts)
seasonplot(temp_ts)
acf)temp_ts_
acf(temp_ts)
IfRainVar<- cardinal$IfRain
cardshort <- cardinal%>%select(-c(date,IfRain,Tprep,MinT,MaxT))
cardshort
pca_card<- princomp(scale(cardshort,scale=FALSE),cor = FALSE)
plot(pca_card$scores, pch = 16, col =IfRainVar)
legend("topright",c("No Rain","Rain"),pch=16,col=c("black","red"))
corrplot(cardinal)
corplot(cardinal)
library(corplot)
library(corrplot)
corrplot(cardinal)
corrplot(cardinal[-c(date)])
corrplot(cardinal[,-c(date)])
cardinal[,-c(date)]
cardinal[,-c(date,IfRain)]
cardinal[2,3]
cardinal[,3]
cardinal[,c(date)]
cardinal(,c(date))
cardinal[,-c(1)]
cardinal[,-c(1,13)]
cardinal[,-c(1,12)]
corrplot(cardinal[,-c(1,12)])
corrplot(cardinal[,-c(1,12)])
corrplot(cor(cardinal[,-c(1,12)]))
screeplot(pca_card, type = "lines")
prcomp(cardshort)
screeplot(prcomp(cardshort))
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
# weather station data from NOAA API
library(rnoaa)
#time series related
library(forecast)
install.packages("forecast")
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
# weather station data from NOAA API
library(rnoaa)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
library(ClusterR)
install.packages("ClusterR")
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
# weather station data from NOAA API
library(rnoaa)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
library(ClusterR)
library(cluster)
library(broom)
#other packages for kmeans
library(here)
install.packages("here")
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
# weather station data from NOAA API
library(rnoaa)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
library(ClusterR)
library(cluster)
library(broom)
#other packages for kmeans
library(here)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
nclim<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/decadal/2020-2021-ste-decadal.csv')%>%drop_na()
update.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
update.packages(ask = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
library(vctrs)
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
#package for cleaning data and logical things
library(tidyverse)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(ggplot2)
library(tidyverse)
install.packages("broom", type="binary")
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
install.packages("tidyverse", type="binary")
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
# ---- create function for cluster analysis ----
# function to calculate cluster info for a given k value
calculate_cluster <- function(data, k) {
x <- data %>%
na.omit() %>%
scale()
df <- kmeans(x, center = k) %>%
augment(data) %>% # creates column ".cluster" with cluster label
mutate(silhouette = cluster::silhouette(as.integer(.cluster), dist(x))[, "sil_width"]) # calculate silhouette score
return(df)
}
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
# weather station data from NOAA API
library(rnoaa)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
library(ClusterR)
library(cluster)
library(broom)
#other packages for kmeans
library(here)
library(tidymodels)
## Read in data from AWS nClimGrid
nclim<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/decadal/2020-2021-ste-decadal.csv')%>%drop_na()
nclim
nclim$state<-as.factor(nclim$state)
nclim
str(nclim$state)
nclim$region<-as.factor(nclim$region)
nclim$region_code<-as.factor(nclim$region_code)
str(nclim$region_code)
## inspect data
view(nclim)
ggpolt(nclim,aes(x=date,y=TMIN))+geom_point(colour="green")
ggpolt(nclim,aes(x=date,y=TAVG))+geom_point(colour="green")
## Read in data from AWS nClimGrid
nclim<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/decadal/2020-2021-ste-decadal.csv')%>%drop_na()
#logistic regression
fit1 = glm(IfRain~date+AvgT+AvgLw+AvgSt+AvgSr, data=cardinal, family="binomial")
summary(fit1)
#predict something with logistic regression
## inspect data
head(nclim)
colnames(nclim)<-colnames(nclim)%>%tolower()
head(nclim)
colnames(nclim)
colnames(nclim)[2]
colnames(nclim)[7:10]
## inspect data
head(nclim)
colnames(nclim)[8:10]<-colnames(nclim)%>%tolower()%>% paste0("_degF")
colnames(nclim)
head(nclim)
## inspect data
head(nclim)
colnames(nclim)[8:10]<-colnames(nclim)%>%tolower()%>% paste0("_degF")
colnames(nclim)[7]<-colnames(nclim)%>%tolower()%>% paste0("_in")
head(nclim)
## inspect data
head(nclim)
colnames(nclim)[8:10]<-colnames(nclim)[8:10]%>%tolower()%>% paste0("_degF")
colnames(nclim)[7]<-colnames(nclim)[7]%>%tolower()%>% paste0("_in")
head(nclim)
## Read in data from AWS nClimGrid
nclim<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/decadal/2020-2021-ste-decadal.csv')%>%drop_na()
## inspect data
head(nclim)
colnames(nclim)[8:10]<-colnames(nclim)[8:10]%>%tolower()%>% paste0("_degF")
colnames(nclim)[7]<-colnames(nclim)[7]%>%tolower()%>% paste0("_in")
head(nclim)
## inspect data
head(nclim)
colnames(nclim)[8:10]<-colnames(nclim)[8:10]%>%tolower()%>% paste0("_degf")
colnames(nclim)[7]<-colnames(nclim)[7]%>%tolower()%>% paste0("_in")
head(nclim)
## Read in data from AWS nClimGrid
nclim<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/decadal/2020-2021-ste-decadal.csv')%>%drop_na()
## inspect data
head(nclim)
colnames(nclim)[8:10]<-colnames(nclim)[8:10]%>%tolower()%>% paste0("_degf")
colnames(nclim)[7]<-colnames(nclim)[7]%>%tolower()%>% paste0("_in")
head(nclim)
# scatterplot of
ggpolt(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="green")
library(ggplot2)
# scatterplot of
ggpolt(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="green")
# scatterplot of
ggpolt(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="green")
library(ggplot)
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
# weather station data from NOAA API
library(rnoaa)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
library(ClusterR)
library(cluster)
library(broom)
#other packages for kmeans
library(here)
library(tidymodels)
# scatterplot of
ggpolt(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="green")
# scatterplot of
ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="green")
# scatterplot of
ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="blue")
# scatterplot of
ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="green")
# scatterplot of
ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="blue")
# scatterplot of
ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="blue")+labs(x = "Date", y = "Average Tempurature (F)")
# scatterplot of
ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="blue")+labs(x = "Date", y = "Average Tempurature (F)",title ="Tempurature Over Time")
plot(nclim$PRCP,nclim$TAVG)
plotOtemp+geom_smooth(method="lm")
# scatterplot of tempurature vs time
plotOtemp<-ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="blue")+labs(x = "Date", y = "Average Tempurature (C)",title ="Tempurature Over Time")
plotOtemp
plotOtemp+geom_smooth(method="lm")
# scatterplot of tempurature vs time
plotOtemp<-ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="red")+labs(x = "Date", y = "Average Tempurature (C)",title ="Tempurature Over Time")
plotOtemp
plotOtemp+geom_smooth(method="lm")
plotOtemp+geom_smooth(method="lm",se=TRUE)
plotOtemp+geom_smooth(method="lm",span=.75)
plotOtemp+geom_smooth(method="lm",se.fit=TRUE)
plotOtemp+geom_smooth(method="lm",se=TRUE)
plotOtemp+geom_smooth(method="lm",se=TRUE)+theme_classic()
plotOtemp+geom_smooth(method="lm",se=TRUE,col = "black")+theme_classic()
loadings(pca_card)
# n climate  grid data
temp_ts <- xts(cardinal$AvgT,cardinal$date)
head(temp_ts)
autoplot(temp_ts[1:600])
half_temp <-temp_ts[1:600]
library(forecast)
d.arima <- auto.arima(half_temp)
d.forecast <- forecast(d.arima, level = c(90), h = 200)
autoplot(d.forecast)
# scatterplot of tempurature vs time
plotOtemp<-ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="red")+labs(x = "Date", y = "Average Tempurature (C)",title ="Tempurature Over Time")
plotOtemp
plotOtemp+geom_smooth(method="lm",se=TRUE,col = "black")+theme_classic()
??yday
help(lubridate::yday)
library(lubridate)
library(yday)
??mutate
??here
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
library(TSstudio)
#other packages for kmeans
library(here)
library(tidymodels)
library(ClusterR)
library(cluster)
library(broom)
## allows us to read in large amounts of data
library(data.table)
## Read in data from AWS nClimGrid 2020-2021
nclim_2020s<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/decadal/2020-2021-ste-decadal.csv')%>%drop_na()
#If computation time takes a while ... we have   a .Rda file
load("NCLIM2010.Rda")
load("NCLIM2020.Rda")
## Lets quickly combind the data sets to get a data set ranging from the above
## lets also filter for data record that pertain to North Carolina
nclim <- rbind(nclim_2020s,nclim_2010s)%>%filter(state == c("North Carolina", "South Carolina"))
## Using the whole data set, subset values to only look at the years 2019 to 2020
## We will be using this data set for k-means clustering later
## Call the data set nclimk
## This data set will have 34 thousand objects
nclimk_raw<-nclim_2020s%>%filter(date >= "2020-01-01" & date <="2020-12-31")%>%filter(state == c("North Carolina", "South Carolina"))
#create a function for basic syntax
# convert data value temperature F to C
# Call it CtoF
CtoF<- function(datcols){
x<- (9/5)*datcols+32
return(x)
}
#apply the fucntion  CtoF with tidyverse functions
# to the coloumns relating to tempurature
colnames(nclim)
nclim[8:10]<- nclim[8:10]%>% lapply(CtoF)
head(nclim)
## Apply Tidyverse piping to easily add degree labels  to the end of certain coloumns for temp
## and to add units for precipitation
colnames(nclim)[8:10]<-colnames(nclim)[8:10]%>%tolower()%>% paste0("_degf")
colnames(nclim)[7]<-colnames(nclim)[7]%>%tolower()%>% paste0("_cm")
head(nclim)
## Keep the weather data coloumns as well as the date, drop all other coloumns
## Further Create the variable ifRain: a factor to indicate wether it rained on a certain day
## Call this final data set nclimf
nclimf <- nclim %>% select(date,prcp_cm,tavg_degf,tmin_degf,tmax_degf,state)%>%
mutate(ifNC=as.factor(as.integer(state=="North Carolina")))%>%
mutate(ifRain= as.factor(as.integer(prcp_cm>0)))%>%
select(-state)
head(nclimf)
### below we do the same cleaning for nlcimk
#apply the ufnction CtoF with tidyverse
nclimk_raw[8:10]<- nclimk_raw[8:10]%>% lapply(CtoF)
## Apply Tidyverse piping to easily add degree labels  to the end of certain coloumns for temp
## and to add units for precipitation
colnames(nclimk_raw)[8:10]<-colnames(nclimk_raw)[8:10]%>%tolower()%>% paste0("_degf")
colnames(nclimk_raw)[7]<-colnames(nclimk_raw)[7]%>%tolower()%>% paste0("_cm")
nclimk <- nclimk_raw %>% select(date,prcp_cm,tavg_degf,tmin_degf,tmax_degf)%>%
mutate(ifRain= as.factor(as.integer(prcp_cm>0)))
#viewing the data for k-means
head(nclimk)
## with the variables date and average temperature, create a time series object.
## save as temp_ts
temp_ts<-xts(nclimf$tavg_degf,nclim$date)
# train/validation split
train_date <- nclimf$date[round(nrow(temp_ts) *0.7)]
train <- temp_ts[index(temp_ts) <= train_date]
test <- temp_ts[index(temp_ts) > train_date]
# plot the time series object we called temp_ts
plot(temp_ts)
# build the time series model
model_ts <- auto.arima(as.vector(train))
model_ts
# plot validation data with forecast on top of plot
forecast <- forecast(model_ts, h=length(test))
forecast_dates <- seq(train_date, length = length(test), by="day")
forecast_xts <- xts(forecast$mean, order.by=forecast_dates)
plot(test, main = 'Forecast Comparison')
lines(forecast_xts, col="blue")
plot(validation, main = 'Forecast Comparison')
plot(test, main = 'Forecast Comparison')
lines(forecast_xts, col="blue")
forecast_xts
act(temp_ts)
acf(temp_ts)
temp_ts
acf(temp_ts[,2])
tsdata <- frequency(temp_ts,frequency=12)
tsdata
tsdata <- ts(temp_ts,frequency = 12)
tsdata
ddata <- decompose(tsdata, "multiplicative")
ddata
plot(ddata)
plot(ddata$trend)
plot(ddata$random)
myforecast <- forecast(model_ts, level=c(95), h=10*12)
plot(myforecast)
model_ts
Box.test(model_ts$resid, lag=5, type="Ljung-Box")
