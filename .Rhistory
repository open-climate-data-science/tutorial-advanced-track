#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library("xts")
library(TSstudio)
#other packages for kmeans
library(here)
library(tidymodels)
library(ClusterR)
library(cluster)
library(broom)
## allows us to read in large amounts of data
library(data.table)
last_nclimk<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-ste-scaled.csv')
help(subset)
help(filter)
## Read in nClimGrid 2010-2019
nclim_2010s<-fread('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/decadal/2010-2019-ste-decadal.csv')%>%drop_na()
#If computation time takes a while ... we have   a .Rda file
load("NCLIM2010.Rda")
load("NCLIM2020.Rda")
## Lets quickly combind the data sets to get a data set ranging from the above
## lets also filter for data record that pertain to North Carolina
nclim <- rbind(nclim_2020s,nclim_2010s)%>%filter(state == c("North Carolina", "South Carolina"))
## Using the whole data set, subset values to only look at the years 2019 to 2020
## We will be using this data set for k-means clustering later
## Call the data set nclimk
## This data set will have 34 thousand objects
nclimk_raw<-nclim_2020s%>%filter(date >= "2020-01-01" & date <="2020-12-31")%>%filter(state == c("North Carolina", "South Carolina"))
#create a function for basic syntax
# convert data value temperature F to C
# Call it CtoF
CtoF<- function(datcols){
x<- (9/5)*datcols+32
return(x)
}
#apply the fucntion  CtoF with tidyverse functions
# to the coloumns relating to tempurature
colnames(nclim)
nclim[8:10]<- nclim[8:10]%>% lapply(CtoF)
head(nclim)
## Apply Tidyverse piping to easily add degree labels  to the end of certain coloumns for temp
## and to add units for precipitation
colnames(nclim)[8:10]<-colnames(nclim)[8:10]%>%tolower()%>% paste0("_degf")
colnames(nclim)[7]<-colnames(nclim)[7]%>%tolower()%>% paste0("_cm")
head(nclim)
## Keep the weather data coloumns as well as the date, drop all other coloumns
## Further Create the variable ifRain: a factor to indicate wether it rained on a certain day
## Call this final data set nclimf
nclimf <- nclim %>% select(date,prcp_cm,tavg_degf,tmin_degf,tmax_degf,state)%>%
mutate(ifNC=as.factor(as.integer(state=="North Carolina")))%>%
mutate(ifRain= as.factor(as.integer(prcp_cm>0)))%>%
select(-state)
head(nclimf)
### below we do the same cleaning for nlcimk
#apply the ufnction CtoF with tidyverse
nclimk_raw[8:10]<- nclimk_raw[8:10]%>% lapply(CtoF)
## Apply Tidyverse piping to easily add degree labels  to the end of certain coloumns for temp
## and to add units for precipitation
colnames(nclimk_raw)[8:10]<-colnames(nclimk_raw)[8:10]%>%tolower()%>% paste0("_degf")
colnames(nclimk_raw)[7]<-colnames(nclimk_raw)[7]%>%tolower()%>% paste0("_cm")
nclimk <- nclimk_raw %>% select(date,prcp_cm,tavg_degf,tmin_degf,tmax_degf)%>%
mutate(ifRain= as.factor(as.integer(prcp_cm>0)))
#viewing the data for k-means
head(nclimk)
calculate_cluster <- function(data, k) {
x <- data %>%
na.omit() %>%
scale()
df <- kmeans(x, center = k) %>%
augment(data) %>% # creates column ".cluster" with cluster label
# makes coloumn called silhouette, uses a cluster function called silhouette
mutate(silhouette = cluster::silhouette(as.integer(.cluster), dist(x))[, "sil_width"])
# calculate silhouette score
return(df)
}
# data subset nclimk
# chnage the date to the day of the year!
# select the column of the date and temperature only
# omit any missing values
# inspect data
nclimk_tocluster <- nclimk %>%
mutate(doy = yday(date)) %>%
select(doy, tavg_degf,prcp_cm) %>%
na.omit()
head(nclimk_tocluster)
# map cluster calculations function to range of k values
temp_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(nclimk_tocluster, .x))) %>%
unnest(cols = c(kclust))
head(temp_cluster_data)
str(temp_cluster_data)
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data <- temp_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
head( temp_sil_score_data)
# find maximum
temp_optimal_sil_score_data <- temp_sil_score_data %>%
filter(max(avg_sil_score, na.rm = TRUE) == avg_sil_score)
# save optimal k
temp_optimal_k_value <- temp_optimal_sil_score_data$k
temp_optimal_k_value
#3
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
ggsave("Silhouette_Plot_teacher.png")
# save optimal k cluster data as nclimk_optimal_cluster
nclimk_optimal_cluster <- temp_cluster_data %>%
filter(k == temp_optimal_k_value)
head(nclimk_optimal_cluster)
tail(nclimk_optimal_cluster)
# plot outputs tempavg vs doy
# color each data point by its associated cluster
ggplot(data = nclimk_optimal_cluster) +
geom_point(aes(x = doy, y = tavg_degf, color = .cluster,shape=.cluster), alpha = 0.5) +
labs(x = "Day of Year", y = "Avg Air Temperature (C)", color = "Cluster ID",shape = "Cluster ID")+
theme_light()
# plot outputs density of doy colored by cluster
ggplot(data = nclimk_optimal_cluster) +
geom_density(aes(x = doy, fill = .cluster), alpha = 0.5) +
labs(x = "Day of Year", y = "Density", fill = "Cluster ID") +
theme_classic()
# plot outputs tempavg vs doy
# color each data point by its associated cluster
ggplot(data = nclimk_optimal_cluster) +
geom_point(aes(x = doy, y = tavg_degf, color = .cluster,shape=.cluster), alpha = 0.5) +
labs(x = "Day of Year", y = "Avg Air Temperature (C)", color = "Cluster ID",shape = "Cluster ID")+
theme_dark()
# plot outputs tempavg vs doy
# color each data point by its associated cluster
ggplot(data = nclimk_optimal_cluster) +
geom_point(aes(x = doy, y = tavg_degf, color = .cluster,shape=.cluster), alpha = 0.5) +
labs(x = "Day of Year", y = "Avg Air Temperature (C)", color = "Cluster ID",shape = "Cluster ID")+
theme_test()
plot_ly(x=temp, y=pressure, z=dtime, type="scatter3d", mode="markers", color=temp)
plot_ly(x=temp, y=pressure, z=dtime, type="scatter3d", mode="markers", color=temp)
## plotting in 3d
library(plotly)
plot_ly(x=nclimk$date, y=nclimk$tavg_degf, z=nclimk$prcp_cm, type="scatter3d", mode="markers", color=nclimk_optimal_cluster$.cluster)
View(nclimk)
nclimk_optimal_cluster
plot_ly(x=nclimk_optimal_cluster$date, y=nclimk_optimal_cluster$tavg_degf, z=nclimk_optimal_cluster$prcp_cm, type="scatter3d", mode="markers", color=nclimk_optimal_cluster$.cluster)
plot_ly(x=nclimk_optimal_cluster$date, y=nclimk_optimal_cluster$tavg_degf, z=nclimk_optimal_cluster$prcp_cm, type="scatter3d", mode="markers", color=nclimk_optimal_cluster$.cluster)
last_nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-ste-scaled.csv')
nclimk_last <- last_nclimk_raw%>%
filter(state="NC")%>%
select(-state)
last_nclimk_raw$state
last_nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-ste-scaled.csv')
nclimk_last <- last_nclimk_raw%>%
filter(state="North Carolina")%>%
select(-state)
last_nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-ste-scaled.csv')
nclimk_last <- last_nclimk_raw%>%
filter(state="North Carolina")
nclimk_last <- last_nclimk_raw%>%
filter(state=="North Carolina")%>%
select(-state)
colnames(nclimk_last)[9:11]<-colnames(nclimk_last)[9:11]%>%
tolower()%>%paste0("_degf")
colnames(nclimk_last)[7]<-colnames(nclimk_last)[7]%>%tolower()%>% paste0("_cm")
nclimk_last
last_nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
nclimk_last <- last_nclimk_raw%>%
filter(state=="North Carolina")%>%
select(-state)
colnames(nclimk_last)[9:11]<-colnames(nclimk_last)[9:11]%>%
tolower()%>%paste0("_degf")
colnames(nclimk_last)[7]<-colnames(nclimk_last)[7]%>%tolower()%>% paste0("_cm")
nclimk_last <- last_nclimk_raw%>%
filter(state=="North Carolina")%>%
select(-c(state,month,region_code,year,day))
nclimk_last
last_nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
last_nclimk_raw
last_nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
nclimk_last <- last_nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
colnames(nclimk_last)[9:11]<-colnames(nclimk_last)[9:11]%>%
tolower()%>%paste0("_degf")
colnames(nclimk_last)[7]<-colnames(nclimk_last)[7]%>%tolower()%>% paste0("_cm")
nclimk_last
last_nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
nclimk_last <- last_nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
nclimk_last
temp_cluster_data_final<- calculate_cluster(nclimk_last,4)
head(nclimk_last)
temp_cluster_data_final<- calculate_cluster(nclimk_last[,-c(1,2)],4)
temp_cluster_data
temp_cluster_data_final<- calculate_cluster(nclimk_last[,-c(1,2)],2:12)
install.packages("usmap")
library(usmap)
install.packages("rio")
temp_cluster_data_final
plot_usmap( data = temp_cluster_data_final, values = .cluster, "counties", include = c("NC"), color=.cluster)
temp_cluster_data_final$.cluster
plot_usmap( data = temp_cluster_data_final, values = "Count", "counties", include = c("NC"), color=.cluster)
library(usmap)
library(ggplot2)
library(rio)
carrierdata <- import("GA Info.xlsx")
plot_usmap( data = temp_cluster_data_final, values = "Count", "counties", include = c("NC"), color=temp_cluster_data_final$.cluster)
plot_usmap( data = temp_cluster_data_final, "counties", include = c("NC"), color=temp_cluster_data_final$.cluster)
plot_usmap( data = temp_cluster_data_final, "counties", include = c("NC"), color=temp_cluster_data_final$.cluster)
temp_cluster_data_final
cbind(temp_cluster_data_final,nclimk_last$county)
ClusterWCounty<-cbind(temp_cluster_data_final,nclimk_last$county)
ClusterWCounty<-cbind(temp_cluster_data_final,nclimk_last$county)
colnames(ClusterWCounty)
colnames(ClusterWCounty)[7]="county"
ClusterWCounty%>%group_by(county)
ClusterWCounty%>%group_by(county)
mode(c(1,2,3))
help(mode)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))
ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))
ClusterWCounty$CommonClust
sample<-ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))
sample$CommonClust
ClusterWCounty
ClusterWCounty<-cbind(temp_cluster_data_final,nclimk_last$county,nclimk_last$date)
colnames(ClusterWCounty)[7]="county"
ClusterWCounty
sample
plot_usmap( data = sample, "counties", include = c("NC"), color=CommonClust)
plot_usmap( data = sample, "counties", include = c("NC"), color=sample$CommonClust)
??plot_usmap
fips(NC)
fips(state="NC")
fips(state="NC",county = ())
fips(state="NC",county = "Wake County")
sample<-ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
summaries(county_fips=fips(state="NC",county = county))
sample<-ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(county_fips=fips(state="NC",county = county))
sample
sample<-ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(county_fips=fips(state="NC",county = county))%>%
select(-county)
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")
plot_usmap( data = sample, values = "county_fips", "counties", include = c("NC"), color="black")
sample
sample<-as.dataframe(ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(county_fips=fips(state="NC",county = county))%>%
select(-county))
sample<-dataframe(ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(county_fips=fips(state="NC",county = county))%>%
select(-county))
sample<-data.frame(ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(county_fips=fips(state="NC",county = county))%>%
select(-county))
plot_usmap( data = sample, values = "county_fips", "counties", include = c("NC"), color="black")
sample
sample<-data.frame(ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county))
library(usmap)
library(ggplot2)
library(rio)
plot_usmap( data = sample, values = "fips", "counties", include = c("NC"), color="black")
labs(title="North Carolina")+
scale_fill_continuous(low = "#56B1F7", high = "#132B43", name="Count", label=scales::comma)+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "fips", "counties", include = c("NC"), color=CommonClust)
plot_usmap( data = sample, values = "fips", "counties", include = c("NC"), color=CommonClust)
plot_usmap( data = sample, values = "fips", "counties", include = c("NC"), color=sample$CommonClust)
sample$CommonClust
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
scale_fill_continuous(low = "#56B1F7", high = "#132B43", name="Count", label=scales::comma)+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
scale_fill_continuous(low = "#56B1F7", high = "#132B43", name="CommonClust", label=scales::comma)+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="topright")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="topleft")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="right")
library(usmap)
library(ggplot2)
library(rio)
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme_classic(legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme_classic(legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme_classic()
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme_cl(legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(legend.position="right")
temp_cluster_data_final
# map cluster calculations function to range of k values
temp_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(nclimk_tocluster, .x))) %>%
unnest(cols = c(kclust))
head(temp_cluster_data)
str(temp_cluster_data)
temp_cluster_data_final
last_nclimk_raw <- rbind(last_nclimk_raw_jan,last_nclimk_raw_june)
last_nclimk_raw_jan<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
last_nclimk_raw_june<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202106-cty-scaled.csv')
last_nclimk_raw <- rbind(last_nclimk_raw_jan,last_nclimk_raw_june)
nclimk_last <- last_nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
nclimk_last
nclimk_last <- last_nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
temp_cluster_data_final
temp_cluster_data_final<-calculate_cluster(last_nclimk,3)
head(nclimk_last)
#computes k means with sil score for k=3 clusers
temp_cluster_data_final<-calculate_cluster(last_nclimk[,-c(1,2)],3)
last_nclimk[,-c(1,2)]
last_nclimk
#computes k means with sil score for k=3 clusers
temp_cluster_data_final<-calculate_cluster(nclimk_last[,-c(1,2)],3)
temp_cluster_data_final
ClusterWCounty<-cbind(temp_cluster_data_final,nclimk_last$county,nclimk_last$date)
ClusterWCounty
colnames(ClusterWCounty)[7]="county"
ClusterWCounty
colnames(ClusterWCounty)[7:8]=c("county","date")
ClusterWCounty
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sample<-data.frame(ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county))
library(usmap)
library(ggplot2)
library(rio)
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(legend.position="right")
plot_ly(x=nclimk_optimal_cluster$date, y=nclimk_optimal_cluster$tavg_degf, z=nclimk_optimal_cluster$prcp_cm, type="scatter3d", mode="markers", color=nclimk_optimal_cluster$.cluster)
last_nclimk_raw_jan<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
last_nclimk_raw_feb<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202102-cty-scaled.csv')
last_nclimk_raw <- rbind(last_nclimk_raw_jan,last_nclimk_raw_june)
last_nclimk_raw_jan<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
last_nclimk_raw_feb<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202102-cty-scaled.csv')
last_nclimk_raw <- rbind(last_nclimk_raw_jan,last_nclimk_raw_feb)
nclimk_last <- last_nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
numVarstoCluster<- nclimk_last[,-c(1:2)]
# map cluster calculations function to range of k values
county_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(numVarstoCluster, .x))) %>%
unnest(cols = c(kclust))
head(county_cluster_data)
str(county_cluster_data)
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data_county <- county_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
head( temp_sil_score_data_county)
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data_county%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data_county%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data_county%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
county_cluster_data
#computes k means with sil score for k=3 clusers
temp_cluster_data_final<-county_cluster_data%>%
filter(k==3) # take the k means result from optimal value
temp_cluster_data_final
ClusterWCounty<-cbind(temp_cluster_data_final,nclimk_last$county,nclimk_last$date)
ClusterWCounty
colnames(ClusterWCounty)[7:8]=c("county","date")
colnames(ClusterWCounty)[8:9]=c("county","date")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sample<-data.frame(ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county))
county_cluster_data
ClusterWCounty
numVarstoCluster<- nclimk_last[,-c(1:2)]
numVarstoCluster
# map cluster calculations function to range of k values
county_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(numVarstoCluster, .x))) %>%
unnest(cols = c(kclust))
head(county_cluster_data)
