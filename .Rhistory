mutate(fips=fips(state="NC",county = county))%>%
select(-county))
library(usmap)
library(ggplot2)
library(rio)
plot_usmap( data = sample, values = "fips", "counties", include = c("NC"), color="black")
labs(title="North Carolina")+
scale_fill_continuous(low = "#56B1F7", high = "#132B43", name="Count", label=scales::comma)+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "fips", "counties", include = c("NC"), color=CommonClust)
plot_usmap( data = sample, values = "fips", "counties", include = c("NC"), color=CommonClust)
plot_usmap( data = sample, values = "fips", "counties", include = c("NC"), color=sample$CommonClust)
sample$CommonClust
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
scale_fill_continuous(low = "#56B1F7", high = "#132B43", name="Count", label=scales::comma)+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
scale_fill_continuous(low = "#56B1F7", high = "#132B43", name="CommonClust", label=scales::comma)+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="topright")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="topleft")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="right")
library(usmap)
library(ggplot2)
library(rio)
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(plot.background=element_rect(), legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme_classic(legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme_classic(legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme_classic()
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme_cl(legend.position="right")
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(legend.position="right")
temp_cluster_data_final
# map cluster calculations function to range of k values
temp_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(nclimk_tocluster, .x))) %>%
unnest(cols = c(kclust))
head(temp_cluster_data)
str(temp_cluster_data)
temp_cluster_data_final
last_nclimk_raw <- rbind(last_nclimk_raw_jan,last_nclimk_raw_june)
last_nclimk_raw_jan<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
last_nclimk_raw_june<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202106-cty-scaled.csv')
last_nclimk_raw <- rbind(last_nclimk_raw_jan,last_nclimk_raw_june)
nclimk_last <- last_nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
nclimk_last
nclimk_last <- last_nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
temp_cluster_data_final
temp_cluster_data_final<-calculate_cluster(last_nclimk,3)
head(nclimk_last)
#computes k means with sil score for k=3 clusers
temp_cluster_data_final<-calculate_cluster(last_nclimk[,-c(1,2)],3)
last_nclimk[,-c(1,2)]
last_nclimk
#computes k means with sil score for k=3 clusers
temp_cluster_data_final<-calculate_cluster(nclimk_last[,-c(1,2)],3)
temp_cluster_data_final
ClusterWCounty<-cbind(temp_cluster_data_final,nclimk_last$county,nclimk_last$date)
ClusterWCounty
colnames(ClusterWCounty)[7]="county"
ClusterWCounty
colnames(ClusterWCounty)[7:8]=c("county","date")
ClusterWCounty
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sample<-data.frame(ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county))
library(usmap)
library(ggplot2)
library(rio)
plot_usmap( data = sample, values = "CommonClust", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
theme(legend.position="right")
plot_ly(x=nclimk_optimal_cluster$date, y=nclimk_optimal_cluster$tavg_degf, z=nclimk_optimal_cluster$prcp_cm, type="scatter3d", mode="markers", color=nclimk_optimal_cluster$.cluster)
last_nclimk_raw_jan<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
last_nclimk_raw_feb<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202102-cty-scaled.csv')
last_nclimk_raw <- rbind(last_nclimk_raw_jan,last_nclimk_raw_june)
last_nclimk_raw_jan<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
last_nclimk_raw_feb<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202102-cty-scaled.csv')
last_nclimk_raw <- rbind(last_nclimk_raw_jan,last_nclimk_raw_feb)
nclimk_last <- last_nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
numVarstoCluster<- nclimk_last[,-c(1:2)]
# map cluster calculations function to range of k values
county_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(numVarstoCluster, .x))) %>%
unnest(cols = c(kclust))
head(county_cluster_data)
str(county_cluster_data)
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data_county <- county_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
head( temp_sil_score_data_county)
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data_county%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data_county%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data_county%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
county_cluster_data
#computes k means with sil score for k=3 clusers
temp_cluster_data_final<-county_cluster_data%>%
filter(k==3) # take the k means result from optimal value
temp_cluster_data_final
ClusterWCounty<-cbind(temp_cluster_data_final,nclimk_last$county,nclimk_last$date)
ClusterWCounty
colnames(ClusterWCounty)[7:8]=c("county","date")
colnames(ClusterWCounty)[8:9]=c("county","date")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sample<-data.frame(ClusterWCounty%>%group_by(county)%>%
summarise(CommonClust = getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county))
county_cluster_data
ClusterWCounty
numVarstoCluster<- nclimk_last[,-c(1:2)]
numVarstoCluster
# map cluster calculations function to range of k values
county_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(numVarstoCluster, .x))) %>%
unnest(cols = c(kclust))
head(county_cluster_data)
knitr::opts_chunk$set(echo = TRUE)
#package for plotting
library(ggplot2)
#package for cleaning data and logical things
library(tidyverse)
#time series related
library(forecast)
#install.packages("xts")                      # Install & load xts package
library(xts)
library(TSstudio)
#other packages for kmeans
library(here)
library(tidymodels)
library(ClusterR)
library(cluster)
library(broom)
## allows us to read in large amounts of data
library(data.table)
## plotting in 3d
library(plotly)
## library
library(usmap)
#create a function for basic syntax
# convert data value temperature F to C
# Call it CtoF
CtoF<- function(datcols){
x<- (9/5)*datcols+32
return(x)
}
# we consider a certain state
state2consider="FL"
nclimk_last <- nclimk_raw%>%
filter(state==state2consider)%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
## We are looking at values from janunary for all the us here, we will eventually subset to a certain state!
nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
# we consider a certain state
state2consider="FL"
nclimk_last <- nclimk_raw%>%
filter(state==state2consider)%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
calculate_cluster <- function(data, k) {
x <- data %>%
na.omit() %>%
scale()
df <- kmeans(x, center = k) %>%
augment(data) %>% # creates column ".cluster" with cluster label
# makes coloumn called silhouette, uses a cluster function called silhouette
mutate(silhouette = cluster::silhouette(as.integer(.cluster), dist(x))[, "sil_width"])
# calculate silhouette score
return(df)
}
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plotly(nclimk$prcp_cm,nclimk$tavg_degf,nclimk$tmax_degf)
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plotly(nclimk$prcp_cm,nclimk$tavg_degf,nclimk$tmax_degf)
nclimk
##plot to the data of average tempurature w.r.t date
plot_ly(nclimk$prcp_cm,nclimk$tavg_degf,nclimk$tmax_degf)
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(nclimk$prcp_cm,nclimk$tavg_degf,nclimk$tmax_degf)
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf)
# data subset nclimk
# we want to only look at the numeric variables
# omit any missing values
# inspect data
nclimk_tocluster <- nclimk %>%
select(tavg_degf,prcp_cm,tmax_degf) %>%
na.omit()
head(nclimk_tocluster)
# map cluster calculations function to range of k values
temp_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(nclimk_tocluster, .x))) %>%
unnest(cols = c(kclust))
head(temp_cluster_data)
str(temp_cluster_data)
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data <- temp_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
head( temp_sil_score_data)
# find maximum
temp_optimal_sil_score_data <- temp_sil_score_data %>%
filter(max(avg_sil_score, na.rm = TRUE) == avg_sil_score)
# save optimal k
temp_optimal_k_value <- temp_optimal_sil_score_data$k
temp_optimal_k_value
#3
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
ggsave("Silhouette_Plot_teacher.png")
# save optimal k cluster data as nclimk_optimal_cluster
nclimk_optimal_cluster <- temp_cluster_data %>%
filter(k == temp_optimal_k_value)
head(nclimk_optimal_cluster)
tail(nclimk_optimal_cluster)
# Call this ClusterWCounty
ClusterWCounty<-cbind(nclimk_optimal_cluster,nclimk$county,nclimk$date)
colnames(ClusterWCounty)[7:8]=c("county","date")
head(ClusterWCounty)
#function for the mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =mean(as.numeric((.cluster))))%>%
mutate(fips=fips(state=state2consider,county = county))%>%
select(-county)
## if i was to compute the mode
#countyPlot<-ClusterWCounty%>%group_by(county)%>%
#                summarise(Common_Cluster =getmode(.cluster))%>%
#               mutate(fips=fips(state=state2consider,county = county))%>%
#               select(-county)
countyPlot<- data.frame(countyPlot)
head(countyPlot)
plot_usmap( data = countyPlot, values = "Common_Cluster", "counties", include = c(state2consider), color="black")+labs(title=state2consider)+
#can comment out the below line if we use the mode method.
scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
#3d plot for all of our clusters
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,color=ClusterWCounty$.cluster)
#3d plot for all of our clusters
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,color=ClusterWCounty$.cluster)+
labs(x="Percepitation",y="Average Tempurature",z="Maximum Tempurature")
#3d plot for all of our clusters
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,color=ClusterWCounty$.cluster)+
labs(x="Percepitation",y="Average Tempurature",z="Maximum Tempurature")
#3d plot for all of our clusters
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,color=ClusterWCounty$.cluster)
cardinal <- read_csv("cardinal_data.csv",
col_types = list(`Average Air Temperature (F)` = col_number(),
`Maximum Air Temperature (F)` = col_number(),
`Minimum Air Temperature (F)` = col_number(),
`Average Experimental Leaf Wetness (mV)` = col_number(),
`Total Precipitation (in)` = col_number(),
`Average Relative Humidity (%)` = col_number(),
`Average Soil Moisture (m3/m3)` = col_number(),
`Average Soil Temperature (F)` = col_number(),
`Average Solar Radiation (W/m2)` = col_number(),
`Average Station Pressure (mb)` = col_number()))
cardinal<-drop_na(cardinal)
str(cardinal)
cardinal$Date<-as.Date(cardinal$Date, tryFormats= c("%m/%d/%y"))
view(cardinal)
#changes col names
colnames(cardinal)=c("date","AvgT","MaxT","MinT","AvgLw","Tprep","AvgHum","AvgSm","AvgSt","AvgSr","AvgStp")
cardinal$IfRain<- (cardinal$Tprep>0)
cardinal$IfRain<-as.factor(as.integer(cardinal$IfRain))
# we consider a certain state
state2consider="NY"
nclimk_last <- nclimk_raw%>%
filter(state==state2consider)%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
calculate_cluster <- function(data, k) {
x <- data %>%
na.omit() %>%
scale()
df <- kmeans(x, center = k) %>%
augment(data) %>% # creates column ".cluster" with cluster label
# makes coloumn called silhouette, uses a cluster function called silhouette
mutate(silhouette = cluster::silhouette(as.integer(.cluster), dist(x))[, "sil_width"])
# calculate silhouette score
return(df)
}
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf)
# data subset nclimk
# we want to only look at the numeric variables
# omit any missing values
# inspect data
nclimk_tocluster <- nclimk %>%
select(tavg_degf,prcp_cm,tmax_degf) %>%
na.omit()
head(nclimk_tocluster)
# map cluster calculations function to range of k values
temp_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(nclimk_tocluster, .x))) %>%
unnest(cols = c(kclust))
head(temp_cluster_data)
str(temp_cluster_data)
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data <- temp_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
head( temp_sil_score_data)
# find maximum
temp_optimal_sil_score_data <- temp_sil_score_data %>%
filter(max(avg_sil_score, na.rm = TRUE) == avg_sil_score)
# save optimal k
temp_optimal_k_value <- temp_optimal_sil_score_data$k
temp_optimal_k_value
#3
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
ggsave("Silhouette_Plot_teacher.png")
# save optimal k cluster data as nclimk_optimal_cluster
nclimk_optimal_cluster <- temp_cluster_data %>%
filter(k == temp_optimal_k_value)
head(nclimk_optimal_cluster)
tail(nclimk_optimal_cluster)
# Call this ClusterWCounty
ClusterWCounty<-cbind(nclimk_optimal_cluster,nclimk$county,nclimk$date)
colnames(ClusterWCounty)[7:8]=c("county","date")
head(ClusterWCounty)
#function for the mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =mean(as.numeric((.cluster))))%>%
mutate(fips=fips(state=state2consider,county = county))%>%
select(-county)
## if i was to compute the mode
#countyPlot<-ClusterWCounty%>%group_by(county)%>%
#                summarise(Common_Cluster =getmode(.cluster))%>%
#               mutate(fips=fips(state=state2consider,county = county))%>%
#               select(-county)
countyPlot<- data.frame(countyPlot)
head(countyPlot)
plot_usmap( data = countyPlot,
values = "Common_Cluster", "counties",
include = c(state2consider),
color="black")+l
plot_usmap( data = countyPlot,
values = "Common_Cluster", "counties",
include = c(state2consider),
color="black")+
labs(title=paste0(state2consider,"Cluster Mapping"))+
#can comment out the below line if we use the mode method.
scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
#3d plot for all of our clusters
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,color=ClusterWCounty$.cluster)
library(forecast)
forecast_1 <- forecast()
plot(test, main = 'Forecast Comparison')
plot(test, main = 'Forecast Comparison')
