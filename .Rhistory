#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
## Using the whole data set, subset values to only look at the years 2019 to 2020
## We will be using this data set for k-means clustering later
## Call the data set nclimk
## This data set will have 34 thousand objects
nclimk_raw<-read_csv('https://noaa-nclimgrid-daily-pds.s3.amazonaws.com/EpiNOAA/csv/202101-cty-scaled.csv')
### below we do the same cleaning for nlcimk
#apply the ufnction CtoF with tidyverse
nclimk_last <- nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
#create a function for basic syntax
# convert data value temperature F to C
# Call it CtoF
CtoF<- function(datcols){
x<- (9/5)*datcols+32
return(x)
}
### below we do the same cleaning for nlcimk
#apply the ufnction CtoF with tidyverse
nclimk_last <- nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
calculate_cluster <- function(data, k) {
x <- data %>%
na.omit() %>%
scale()
df <- kmeans(x, center = k) %>%
augment(data) %>% # creates column ".cluster" with cluster label
# makes coloumn called silhouette, uses a cluster function called silhouette
mutate(silhouette = cluster::silhouette(as.integer(.cluster), dist(x))[, "sil_width"])
# calculate silhouette score
return(df)
}
##plot to the data of average tempurature w.r.t date
plot_ly(nclimk_last$prcp_cm,nclimk_last$tavg_degf,nclimk_last$tmax_degf)
help(nclimk_last)
nclimk_last
nclimk<-data.frame(nclimk_last)
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(nclimk$prcp_cm,nclimk$tavg_degf,nclimk_last$tmax_degf)
nclimk
##plot to the data of average tempurature w.r.t date
plot_ly(nclimk$prcp_cm,nclimk$tavg_degf,nclimk$tmax_degf)
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(nclimk$prcp_cm,nclimk$tavg_degf,nclimk$tmax_degf)
##plot to the data of average tempurature w.r.t date
plot_ly(nclimk,x=prcp_cm,y=tavg_degf,z=tmax_degf)
##plot to the data of average tempurature w.r.t date
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf)
# data subset nclimk
# chnage the date to the day of the year!
# select the column of the date and temperature only
# omit any missing values
# inspect data
nclimk_tocluster <- nclimk %>%
mutate(doy = yday(date)) %>%
select(doy, tavg_degf,prcp_cm) %>%
na.omit()
# data subset nclimk
# chnage the date to the day of the year!
# select the column of the date and temperature only
# omit any missing values
# inspect data
nclimk_tocluster <- nclimk %>%
select(tavg_degf,prcp_cm,t_max) %>%
na.omit()
# data subset nclimk
# chnage the date to the day of the year!
# select the column of the date and temperature only
# omit any missing values
# inspect data
nclimk_tocluster <- nclimk %>%
select(tavg_degf,prcp_cm,tmax_degf) %>%
na.omit()
head(nclimk_tocluster)
# map cluster calculations function to range of k values
#
county_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(nclimk_tocluster, .x))) %>%
unnest(cols = c(kclust))
head(county_cluster_data)
str(county_cluster_data)
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data <- temp_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data <- county_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
head( temp_sil_score_data)
# find maximum
temp_optimal_sil_score_data <- temp_sil_score_data %>%
filter(max(avg_sil_score, na.rm = TRUE) == avg_sil_score)
# save optimal k
temp_optimal_k_value <- temp_optimal_sil_score_data$k
temp_optimal_k_value
#3
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
ggsave("Silhouette_Plot_teacher.png")
# save optimal k cluster data as nclimk_optimal_cluster
nclimk_optimal_cluster <- temp_cluster_data %>%
filter(k == temp_optimal_k_value)
# save optimal k cluster data as nclimk_optimal_cluster
nclimk_optimal_cluster <- county_cluster_data %>%
filter(k == temp_optimal_k_value)
head(nclimk_optimal_cluster)
tail(nclimk_optimal_cluster)
# plot outputs tempavg vs doy
# color each data point by its associated cluster
ggplot(data = nclimk_optimal_cluster) +
geom_point(aes(x = doy, y = tavg_degf, color = .cluster,shape=.cluster), alpha = 0.5) +
labs(x = "Day of Year", y = "Avg Air Temperature (C)", color = "Cluster ID",shape = "Cluster ID")+
theme_test()
ClusterWCounty<-cbind(nclimk_optimal_cluster,nclimk$county,nclimk$date)
colnames(ClusterWCounty)[7:8]=c("county","date")
head(ClusterWCounty)
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =mean(as.numeric((.cluster))))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
countyPlot<- data.frame(countyPlot)
head(countyPlot)
plot_usmap( data = countyPlot, values = "Common_Cluster", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
## if i was to compute the mode
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =getmode(as.numeric((.cluster))))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
## if i was to compute the mode
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =getmode((.cluster)))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
## if i was to compute the mode
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =mean(as.numeric((.cluster))))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
## if i was to compute the mode
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
#function for the mode
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =mean(as.numeric((.cluster))))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
## if i was to compute the mode
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =mean(as.numeric((.cluster))))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
## if i was to compute the mode
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =getmode(.cluster))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
countyPlot<- data.frame(countyPlot)
head(countyPlot)
plot_usmap( data = countyPlot, values = "Common_Cluster", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
plot_usmap( data = countyPlot, values = "Common_Cluster", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
# scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,col=Common_Cluster)
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,col=ClusterWCounty$.cluster)
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,color=ClusterWCounty$.cluster)
# plot validation data with forecast on top of plot
forecast <- forecast(model_ts, h=length(test))
## Lets quickly combind the data sets to get a data set ranging from the above
## lets also filter for data record that pertain to North Carolina
nclim <- rbind(nclim_2020s,nclim_2010s)%>%filter(state == c("North Carolina", "South Carolina"))
#If computation time takes a while ... we have   a .Rda file
load("NCLIM2010.Rda")
load("NCLIM2020.Rda")
## Lets quickly combind the data sets to get a data set ranging from the above
## lets also filter for data record that pertain to North Carolina
nclim <- rbind(nclim_2020s,nclim_2010s)%>%filter(state == c("North Carolina", "South Carolina"))
#create a function for basic syntax
# convert data value temperature F to C
# Call it CtoF
CtoF<- function(datcols){
x<- (9/5)*datcols+32
return(x)
}
#apply the fucntion  CtoF with tidyverse functions
# to the coloumns relating to tempurature
colnames(nclim)
nclim[8:10]<- nclim[8:10]%>% lapply(CtoF)
head(nclim)
## Apply Tidyverse piping to easily add degree labels  to the end of certain coloumns for temp
## and to add units for precipitation
colnames(nclim)[8:10]<-colnames(nclim)[8:10]%>%tolower()%>% paste0("_degf")
colnames(nclim)[7]<-colnames(nclim)[7]%>%tolower()%>% paste0("_cm")
head(nclim)
## Keep the weather data coloumns as well as the date, drop all other coloumns
## Further Create the variable ifRain: a factor to indicate wether it rained on a certain day
## Call this final data set nclimf
nclimf <- nclim %>% select(date,prcp_cm,tavg_degf,tmin_degf,tmax_degf,state)%>%
mutate(ifNC=as.factor(as.integer(state=="North Carolina")))%>%
mutate(ifRain= as.factor(as.integer(prcp_cm>0)))%>%
select(-state)
head(nclimf)
### below we do the same cleaning for nlcimk
#apply the ufnction CtoF with tidyverse
nclimk_last <- nclimk_raw%>%
filter(state=="NC")%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
# scatterplot of avg tempurature vs time, color the points red
## add labels
## save the plot at plotOTemp
plotOtemp<-ggplot(nclim,aes(x=date,y=tavg_degf))+geom_point(colour="red")+labs(x = "Date", y = "Average Tempurature (F)",title ="Tempurature Over Time")
plotOtemp
plotOtemp+geom_smooth(method="lm",se=TRUE,col = "black")+theme_classic()
## with the variables date and average temperature, create a time series object.
## save as temp_ts
temp_ts<-xts(nclimf$tavg_degf,nclim$date)
# train/validation split
train_date <- nclimf$date[round(nrow(temp_ts) *0.7)]
train <- temp_ts[index(temp_ts) <= train_date]
test <- temp_ts[index(temp_ts) > train_date]
# plot the time series object we called temp_ts
plot(temp_ts)
# build the time series model
model_ts <- auto.arima(as.numeric(train))
model_ts
# plot validation data with forecast on top of plot
forecast <- forecast(model_ts, h=length(test))
forecast_dates <- seq(train_date, length = length(test), by="day")
forecast_xts <- xts(forecast$fitted, order.by=forecast_dates)
nrow(forecast$fitted)
forecast
calculate_cluster <- function(data, k) {
x <- data %>%
na.omit() %>%
scale()
df <- kmeans(x, center = k) %>%
augment(data) %>% # creates column ".cluster" with cluster label
# makes coloumn called silhouette, uses a cluster function called silhouette
mutate(silhouette = cluster::silhouette(as.integer(.cluster), dist(x))[, "sil_width"])
# calculate silhouette score
return(df)
}
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf)
# data subset nclimk
# chnage the date to the day of the year!
# select the column of the date and temperature only
# omit any missing values
# inspect data
nclimk_tocluster <- nclimk %>%
select(tavg_degf,prcp_cm,tmax_degf) %>%
na.omit()
head(nclimk_tocluster)
# map cluster calculations function to range of k values
#
county_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(nclimk_tocluster, .x))) %>%
unnest(cols = c(kclust))
head(county_cluster_data)
str(county_cluster_data)
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data <- county_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
head( temp_sil_score_data)
# find maximum
temp_optimal_sil_score_data <- temp_sil_score_data %>%
filter(max(avg_sil_score, na.rm = TRUE) == avg_sil_score)
# save optimal k
temp_optimal_k_value <- temp_optimal_sil_score_data$k
temp_optimal_k_value
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
ggsave("Silhouette_Plot_teacher.png")
# save optimal k cluster data as nclimk_optimal_cluster
nclimk_optimal_cluster <- county_cluster_data %>%
filter(k == temp_optimal_k_value)
head(nclimk_optimal_cluster)
tail(nclimk_optimal_cluster)
# Call this ClusterWCounty
ClusterWCounty<-cbind(nclimk_optimal_cluster,nclimk$county,nclimk$date)
colnames(ClusterWCounty)[7:8]=c("county","date")
head(ClusterWCounty)
countyPlot<-ClusterWCounty%>%group_by(county)%>%
summarise(Common_Cluster =mean(as.numeric((.cluster))))%>%
mutate(fips=fips(state="NC",county = county))%>%
select(-county)
## if i was to compute the mode
#countyPlot<-ClusterWCounty%>%group_by(county)%>%
#                summarise(Common_Cluster =getmode(.cluster))%>%
#                mutate(fips=fips(state="NC",county = county))%>%
#                select(-county)
countyPlot<- data.frame(countyPlot)
head(countyPlot)
plot_usmap( data = countyPlot, values = "Common_Cluster", "counties", include = c("NC"), color="black")+labs(title="North Carolina")+
#can comment out the below line if we use the mode method.
scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
#3d plot for all of our clusters
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf,color=ClusterWCounty$.cluster)
calculate_cluster <- function(data, k) {
x <- data %>%
na.omit() %>%
scale()
df <- kmeans(x, center = k) %>%
augment(data) %>% # creates column ".cluster" with cluster label
# makes coloumn called silhouette, uses a cluster function called silhouette
mutate(silhouette = cluster::silhouette(as.integer(.cluster), dist(x))[, "sil_width"])
# calculate silhouette score
return(df)
}
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf)
# data subset nclimk
# chnage the date to the day of the year!
# select the column of the date and temperature only
# omit any missing values
# inspect data
nclimk_tocluster <- nclimk %>%
select(tavg_degf,prcp_cm,tmax_degf) %>%
na.omit()
head(nclimk_tocluster)
# map cluster calculations function to range of k values
#
county_cluster_data <- tibble(k = 2:12) %>%
mutate(kclust = map(k, ~calculate_cluster(nclimk_tocluster, .x))) %>%
unnest(cols = c(kclust))
head(county_cluster_data)
str(county_cluster_data)
# calculate average silhoutte score (highest for optimal number of k clusters)
# for each k value
# store these values for each value of k as temp_sil_score_data
temp_sil_score_data <- county_cluster_data %>%
group_by(k) %>%
summarize(avg_sil_score = mean(silhouette, na.rm = TRUE))
head( temp_sil_score_data)
# find maximum
temp_optimal_sil_score_data <- temp_sil_score_data %>%
filter(max(avg_sil_score, na.rm = TRUE) == avg_sil_score)
# save optimal k
temp_optimal_k_value <- temp_optimal_sil_score_data$k
temp_optimal_k_value
# plot the data from temp_sil_score_data and visually inspect to determine the k
# with the largest sil score
# Add a marker point to visually show the max value!
temp_sil_score_data%>%
ggplot(mapping =aes(x=k,y=avg_sil_score))+
geom_line()+
geom_point()+
scale_x_continuous(breaks= pretty_breaks())+
geom_point(data=temp_sil_score_data%>%
filter(max(avg_sil_score)==avg_sil_score),
pch=22,
size=5,
colour="purple")+
labs(x="Value of k",y="Mean of Silhouette Score",title="Silhouette Score for Value of k")+
theme_light()
ggsave("Silhouette_Plot_teacher.png")
# save optimal k cluster data as nclimk_optimal_cluster
nclimk_optimal_cluster <- county_cluster_data %>%
filter(k == temp_optimal_k_value)
head(nclimk_optimal_cluster)
tail(nclimk_optimal_cluster)
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf)
### below we do the same cleaning for nlcimk
#apply the ufnction CtoF with tidyverse
state2consider="NC"
nclimk_last <- nclimk_raw%>%
filter(state==state2consider)%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
nclimk<-data.frame(nclimk_last)
##plot to the data of average tempurature w.r.t date
plot_ly(x=nclimk$prcp_cm,y=nclimk$tavg_degf,z=nclimk$tmax_degf)
plot_usmap( data = countyPlot, values = "Common_Cluster", "counties", include = c(state2consider), color="black")+labs(title=state2consider)+
#can comment out the below line if we use the mode method.
scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
state2consider="NC"
plot_usmap( data = countyPlot, values = "Common_Cluster", "counties", include = c(state2consider), color="black")+labs(title=state2consider)+
#can comment out the below line if we use the mode method.
scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
state2consider="NJ"
plot_usmap( data = countyPlot, values = "Common_Cluster", "counties", include = c(state2consider), color="black")+labs(title=state2consider)+
#can comment out the below line if we use the mode method.
scale_fill_continuous(low = "#FFCC00", high = "#CC0000", name="Common_Cluster", label=scales::comma)+
theme(legend.position="right")
### below we do the same cleaning for nlcimk
#apply the ufnction CtoF with tidyverse
state2consider=c("AK", "AL", "AR", "AS", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "GU", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MP", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UM", "UT", "VA", "VI", "VT", "WA", "WI", "WV", "WY")
nclimk_last <- nclimk_raw%>%
filter(state==state2consider)%>%
select(-c(state,month,region_code,year,day))
#applying function CtoF
nclimk_last[4:6]<- nclimk_last[4:6]%>%lapply(CtoF)
# nclim_k colnames
colnames(nclimk_last)[4:6]<-colnames(nclimk_last)[4:6]%>%
tolower()%>%
paste0("_degf")
#colnames for percp.
colnames(nclimk_last)[3]<-colnames(nclimk_last)[3]%>%
tolower()%>%
paste0("_cm")
head(nclimk_last)
tail(nclimk_last)
